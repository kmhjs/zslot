#! /usr/bin/env zsh -f

# Licence : NYSL (http://www.kmonos.net/nysl/)

setopt CDABLE_VARS

script_name=$0

function _zslot::help() {
cat <<EOS
NAME
    ${script_name} - named directory wrapper

SYNOPSIS
    ${script_name} [options] [name] [path]

DESCRIPTION
    Wrap named directory system in zsh.

    Following options (and parameters) are available:

    -a, --add
        USAGE:
            ${script_name} -a [name] [path]
            ${script_name} --add [name] [path]

    -u, --update
        USAGE:
            ${script_name} -u [name] [new dest]
            ${script_name} --update [name] [new dest]

    -d, --delete
        USAGE:
            ${script_name} -d [name]
            ${script_name} --delete [name]
EOS
}

function _zslot::validate_args() {
    local args=(${*})
    local task=${args[1]}
    shift args

    local valid_tasks=(
        -a
        --add
        -u
        --update
        -d
        --delete
    )
    if [[ "${valid_tasks[(r)${task}]}" != "${task}" ]]; then;
        echo "[ERROR] Invalid task (${task}) was given" 1>&2
        return 1
    ; fi

    local n_required_args=2
    if [[ "${task}" == '-d' || "${task}" == '--delete' ]]; then
        n_required_args=1
    ; fi

    if [[ ${#args} != ${n_required_args} ]]; then;
        echo "[ERROR] Task ${task} requires ${n_required_args} of args" 1>&2
        return 1
    ; fi

    return 0
}

function _zslot::is_name_registered() {
    local name=${1}
    local record=$(hash -d | egrep "^${name}=.*$")

    if [[ -n ${record} ]]; then;
        return 0
    ; fi

    return 1
}

function _zslot::confirm() {
    local question=${1}

    echo -n "${question} [y/N] : "
    local ans=n
    read -q ans
    return ${?}
}

function _zslot::add() {
    local name=${1} dest=${2}

    _zslot::is_name_registered ${name}
    if [[ ${?} == 0 ]]; then;
        _zslot::confirm "Overwrite path for name (${name})? [y/N] : "
        if [[ ${?} == 1 ]]; then;
            return 1
        ; fi
    ; fi

    _zslot::update ${name} ${dest}

    return ${?}
}

function _zslot::update() {
    local name=${1} dest=${2}

    if [[ ! -e ${dest} ]]; then;
        echo "[ERROR] Destination path (${dest}) not found." 1>&2
        return 1
    ; fi

    hash -d ${name}=${dest}
    return ${?}
}

function _zslot::delete() {
    local name=${1}

    unhash -d ${name}
    return ${?}
}

function _zslot()
{
    local args=(${*})
    local res=0

    _zslot::validate_args ${args}
    res=${?}
    if [[ ${res} != 0 ]]; then;
        _zslot::help
        return ${res}
    ; fi

    local task=${args[1]}
    shift args
    case ${task} in
        -a|--add)
            _zslot::add ${args}
            return ${?}
            ;;
        -u|--update)
            _zslot::update ${args}
            return ${?}
            ;;
        -d|--delete)
            _zslot::delete ${args}
            return ${?}
            ;;
    esac

    echo '[ERROR] Unknown error was occurred. Plase report in Github.' 1>&2
    return 1
}

_zslot $*

unset script_name
