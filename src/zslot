#! /usr/bin/env zsh -f

# Licence : NYSL (http://www.kmonos.net/nysl/)

script_name=$0

function _zslot::help() {
cat <<EOS
NAME
    ${script_name} - named directory wrapper

SYNOPSIS
    ${script_name} [options] [name] [path]

DESCRIPTION
    Wrap named directory system in zsh.

    Following options (and parameters) are available:

    -a, --add
        USAGE:
            ${script_name} -a [name] [path]
            ${script_name} --add [name] [path]

    -u, --update
        USAGE:
            ${script_name} -u [name] [new dest]
            ${script_name} --update [name] [new dest]

    -r, --remove
        USAGE:
            ${script_name} -r [name]
            ${script_name} --remove [name]

    -s, --show
        usage:
            ${script_name} -s
            ${script_name} --show

    -h, --help
        usage:
            ${script_name} -h
            ${script_name} --help
EOS

    return 0
}

function _zslot::validate_args() {
    local args=(${*})
    local task=${args[1]}
    shift args

    local valid_tasks=(
        -a --add
        -u --update
        -r --remove
        -s --show
        -h --help
    )
    if [[ "${valid_tasks[(r)${task}]}" != "${task}" ]]; then;
        echo "[ERROR] Invalid task (${task}) was given" 1>&2
        return 1
    ; fi

    local n_required_args=2

    case ${task} in
        -r|--remove) n_required_args=1;;
        -s|--show) n_required_args=0;;
        -h|--help) n_required_args=0;;
    esac

    if [[ ${#args} != ${n_required_args} ]]; then;
        echo "[ERROR] Task ${task} requires ${n_required_args} of args" 1>&2
        return 1
    ; fi

    return 0
}

function _zslot::is_name_registered() {
    local name=${1}
    local record=$(cat ${ZUSER_SLOT_FILE_NAME} | egrep "^hash -d ${name}=.*$")

    if [[ -n ${record} ]]; then;
        return 0
    ; fi

    return 1
}

function _zslot::confirm() {
    local question=${1}

    echo -n "${question} [y/N] : "
    local ans=n
    read -q ans
    return ${?}
}

function _zslot::is_slot_record_path_defined() {
    if [[ -z ${ZUSER_SLOT_FILE_NAME} ]]; then;
        echo '[ERROR] Slot record file is not defined.' 1>&2
        return 1
    ; fi

    return 0
}

function _zslot::slot_record_path_prepare() {
    touch ${ZUSER_SLOT_FILE_NAME}
    return ${?}
}

function _zslot::record::add() {
    local name=${1} dest=${2}

    echo "hash -d ${name}=${dest}" >> ${ZUSER_SLOT_FILE_NAME}
    hash -d ${name}=${dest}

    return ${?}
}

function _zslot::record::remove() {
    local name=${1}

    sed -e "/^hash -d ${name}=.*$/d" -i '' ${ZUSER_SLOT_FILE_NAME}
    unhash -d ${name}

    return ${?}
}

function _zslot::cmd::add() {
    local name=${1} dest=${2}

    _zslot::is_name_registered ${name}
    if [[ ${?} != 0 ]]; then;
        _zslot::cmd::update ${name} ${dest} add_mode
        return ${?}
    ; fi

    _zslot::confirm "Overwrite path for name (${name})?"
    if [[ ${?} == 1 ]]; then;
        return 1
    ; fi
    _zslot::cmd::update ${name} ${dest}
    return ${?}
}

function _zslot::cmd::update() {
    local name=${1} dest=${2} is_add=${3}

    if [[ ! -e ${dest} ]]; then;
        echo "[ERROR] Destination path (${dest}) is not found." 1>&2
        return 1
    ; fi

    if [[ -z ${is_add} ]]; then;
        _zslot::record::remove ${name}
    ; fi
    _zslot::record::add ${name} ${dest}

    return ${?}
}

function _zslot::cmd::remove() {
    local name=${1}

    _zslot::record::remove ${name}
    return ${?}
}

function _zslot::cmd::help() {
    _zslot::help
    return ${?}
}

function _zslot::cmd::show() {
    cat ${ZUSER_SLOT_FILE_NAME} | cut -d ' ' -f 3 | sed 's/=/ => /'
    return ${?}
}

function _zslot()
{
    local args=(${*})
    local res=0

    _zslot::validate_args ${args}
    res=${?}
    if [[ ${res} != 0 ]]; then;
        _zslot::cmd::help
        return ${res}
    ; fi

    local task=${args[1]}

    case ${task} in
        -a|--add|-u|--update|-r|--remove)
            _zslot::is_slot_record_path_defined
            res=${?}
            if [[ ${res} != 0 ]]; then;
                return ${res}
            ; fi

            _zslot::slot_record_path_prepare
            res=${?}
            if [[ ${res} != 0 ]]; then;
                return ${res}
            ; fi
            ;;
    esac

    shift args
    case ${task} in
        -a|--add)
            _zslot::cmd::add ${args}
            return ${?}
            ;;
        -u|--update)
            _zslot::cmd::update ${args}
            return ${?}
            ;;
        -r|--remove)
            _zslot::cmd::remove ${args}
            return ${?}
            ;;
        -s|--show)
            _zslot::cmd::show
            return ${?}
            ;;
        -h|--help)
            _zslot::cmd::help
            return ${?}
            ;;
    esac

    echo '[ERROR] Unknown error was occurred. Plase report in Github.' 1>&2
    return 1
}

_zslot $*

unset script_name
